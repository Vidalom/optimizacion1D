{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problema\n",
    "\n",
    "El precio de un sistema de energía solar es dado por:\n",
    "\n",
    "$$U=35A +208V$$\n",
    "\n",
    "dónde $A$ es la superficie del collector y $V$ es el volumen de la bateria que almacena la energía. Debido a consideraciones de balance de energía, se debe considerar que: \n",
    "\n",
    "$$A\\left(290 - \\frac{100}{V}\\right) = 5833.3$$\n",
    "\n",
    "Adicionalmente, el volumen de la batería $V$ está relacionado a la temperatura de operación del sistema $T$, y está configurado tal que:\n",
    "\n",
    "$$V=\\frac{50}{T-20}$$\n",
    "\n",
    "Los proveedores de batería únicamente proveen modelos que trabajan entre 40 y 90 grados centígrados. Se desea optmizar el costo $U$ considerando todas las limitaciones presentadas.\n",
    "\n",
    "## Solución\n",
    "\n",
    "Juntando todas las expresiones y expresando en términos de $T$, tenemos la siguiente ecuación:\n",
    "\n",
    "$$U=\\frac{204165.5}{330 - 2T} + \\frac{10400}{T - 20}$$\n",
    "\n",
    "Puesto que la temperatura $T$ está limitada al rango $[40, 90]$, la función será ploteada en este rango."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x19e7f3adc88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "a = 40\n",
    "b = 90\n",
    "T = np.linspace(a, b, 100)\n",
    "U = (204165.5)/(330-2*T) + (10400)/(T-20)\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(T, U, 'k')\n",
    "plt.xlabel('Temperatura')\n",
    "plt.ylabel('Costo')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Métodos basados en gradiente\n",
    "\n",
    "Puesto que en estos métodos se necesita calcular la derivada, se utilizará python para derivar la ecuación: \n",
    "\n",
    "$$U=\\frac{204165.5}{330 - 2T} + \\frac{10400}{T - 20}$$\n",
    "\n",
    "Entonces la primera y segunda derivada se puede calcular de la siguiente manera:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10400/(T - 20) + 204165.5/(-2*T + 330)\n",
      "-10400/(T - 20)**2 + 408331.0/(-2*T + 330)**2\n"
     ]
    }
   ],
   "source": [
    "import sympy\n",
    "\n",
    "def calcularGradiente():\n",
    "    T = sympy.Symbol('T')\n",
    "    fU = (204165.5)/(330-2*T) + (10400)/(T-20)\n",
    "    \n",
    "    d1fU = sympy.diff(fU)\n",
    "    \n",
    "    print(fU)\n",
    "    print(d1fU)\n",
    "    \n",
    "    return None\n",
    "\n",
    "calcularGradiente()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1225.1656408350887"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def U(T):\n",
    "    return 10400/(T - 20) + 204165.5/(-2*T + 330)\n",
    "\n",
    "U(55.08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.0022423688924249063"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def d1U(T):\n",
    "    return -10400/(T - 20)**2 + 408331.0/(-2*T + 330)**2\n",
    "\n",
    "d1U(55.08)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Algoritmo del método de la bisección\n",
    "\n",
    "* **Paso 1:** Definir: $a$, $b$ y $\\epsilon$.\n",
    "* **Paso 2:** Calcular: $\\alpha=\\frac{a+b}{2}$, $f'(a)$ y $f'(\\alpha)$.\n",
    "    * **if** $f'(a)f'(\\alpha)$ < 0\n",
    "        - **then** $b=\\alpha$.\n",
    "        * **else** $a=\\alpha$.\n",
    "    * **if** $\\lvert a-b\\lvert > \\epsilon$.\n",
    "        * **then** goto Paso 2.\n",
    "        * **else** goto Paso 3.\n",
    "* **Paso 3:** Imprimir $a$ y $f(a)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It: 01 - Temp: 40.0000000000 - Costo 1336.6620000000\n",
      "It: 02 - Temp: 52.5000000000 - Costo 1227.4022222222\n",
      "It: 03 - Temp: 52.5000000000 - Costo 1227.4022222222\n",
      "It: 04 - Temp: 52.5000000000 - Costo 1227.4022222222\n",
      "It: 05 - Temp: 54.0625000000 - Costo 1225.5036361287\n",
      "It: 06 - Temp: 54.8437500000 - Costo 1225.1839888051\n",
      "It: 07 - Temp: 54.8437500000 - Costo 1225.1839888051\n",
      "It: 08 - Temp: 55.0390625000 - Costo 1225.1662656061\n",
      "It: 09 - Temp: 55.0390625000 - Costo 1225.1662656061\n",
      "It: 10 - Temp: 55.0390625000 - Costo 1225.1662656061\n",
      "It: 11 - Temp: 55.0634765625 - Costo 1225.1657646744\n",
      "It: 12 - Temp: 55.0756835938 - Costo 1225.1656564351\n",
      "It: 13 - Temp: 55.0817871094 - Costo 1225.1656378426\n",
      "It: 14 - Temp: 55.0817871094 - Costo 1225.1656378426\n",
      "It: 15 - Temp: 55.0833129883 - Costo 1225.1656368938\n",
      "-------------------------------------------------------------\n",
      "It: 15 - Temp: 55.0833129883 - Costo 1225.1656368938\n"
     ]
    }
   ],
   "source": [
    "def biseccion():\n",
    "    a = 40\n",
    "    b = 90\n",
    "    epsilon = 0.001\n",
    "    \n",
    "    cont = 0\n",
    "    registro = []\n",
    "    \n",
    "    while(True):\n",
    "        alpha = (a+b)/2\n",
    "        \n",
    "        # Primera derivada en a\n",
    "        dU_a = d1U(a)\n",
    "        \n",
    "        #Primera derivada en alpha\n",
    "        dU_alpha = d1U(alpha)\n",
    "        \n",
    "        if(dU_a*dU_alpha < 0):\n",
    "            b = alpha\n",
    "        else:\n",
    "            a = alpha\n",
    "            \n",
    "        Ua = U(a)    \n",
    "        \n",
    "        # Condicion de finalizacion\n",
    "        if(np.abs(a-b) < epsilon):\n",
    "            print('-------------------------------------------------------------')\n",
    "            print(\"It: {:02} - Temp: {:.10f} - Costo {:.10f}\".format(cont, a, Ua))\n",
    "            break\n",
    "            \n",
    "        cont = cont + 1\n",
    "        registro.append([cont, a, Ua])\n",
    "        print(\"It: {:02} - Temp: {:.10f} - Costo {:.10f}\".format(cont, a, Ua))\n",
    "        \n",
    "    return registro\n",
    "\n",
    "        \n",
    "reg1 = biseccion()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluación del método\n",
    "\n",
    "Vamos a plotear el proceso de evolución que el algoritmo siguió para encontrar el mínimo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x19e14469ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def evaluacion(reg):\n",
    "    reg = np.array(reg)\n",
    "    fig, axs = plt.subplots(1, 2, figsize=(15, 6))\n",
    "    \n",
    "    fig.suptitle('Analisis de convergencia')\n",
    "    \n",
    "    axs[0].axhline(55.08, color='k', linewidth=3, linestyle='--')\n",
    "    axs[0].plot(reg[:, 0], reg[:, 1], linewidth=4)\n",
    "    axs[0].set_xlabel('Iteraciones')\n",
    "    axs[0].set_ylabel('Temperatura')\n",
    "    axs[0].grid()\n",
    "    axs[0].set_xlim([0, 15])\n",
    "    \n",
    "    axs[1].axhline(1225.17, color='k', linewidth=3, linestyle='--')\n",
    "    axs[1].plot(reg[:, 0], reg[:, 2], linewidth=4)\n",
    "    axs[1].set_xlabel('Iteraciones')\n",
    "    axs[1].set_ylabel('Costo')\n",
    "    axs[1].grid()\n",
    "    axs[1].set_xlim([0, 15])\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "evaluacion(reg1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
